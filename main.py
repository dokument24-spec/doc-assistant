import telebot
from telebot import types
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from flask import Flask, request
import threading
import re

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = '7640880064:AAEOqKU4mWP06Ob96K3h4VDfrIhfK164Eg0'
GOOGLE_SHEET = 'DocExpress_–ó–∞—è–≤–∫–∏'
ADMIN_CHAT_ID = 5780051172

# === –î–û–°–¢–£–ü –ö GOOGLE SHEETS ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET).sheet1

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
user_states = {}

# === –°–¢–ê–î–ò–ò ===
stages = ['name', 'phone', 'email', 'doc_type', 'task', 'complete']

doc_types = [
    "üìù –î–æ–≥–æ–≤–æ—Ä",
    "üßæ –ñ–∞–ª–æ–±–∞",
    "üì¨ –ó–∞—è–≤–ª–µ–Ω–∏–µ",
    "üìÑ –ü—Ä–µ—Ç–µ–Ω–∑–∏—è",
    "üìã –ê–∫—Ç",
    "üìé –î—Ä—É–≥–æ–µ"
]

# === –í–ê–õ–ò–î–ê–¶–ò–Ø ===
def is_valid_phone(phone):
    return re.match(r'^\+?7\d{10}$', phone)

def is_valid_email(email):
    return re.match(r'^[^@\s]+@[^@\s]+\.[^@\s]+$', email)

# === –°–¢–ê–†–¢ ===
@bot.message_handler(commands=['start'])
def start(message):
    user_states[message.chat.id] = {'stage': 'name'}
    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø ‚Äî —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n"
        "–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å—ë –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –≤ —Å—Ä–æ–∫.\n\n"
        "üìå –ü–æ–µ—Ö–∞–ª–∏. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    )

# === –î–ò–ê–õ–û–ì ===
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    cid = message.chat.id
    if cid not in user_states:
        user_states[cid] = {'stage': 'name'}

    state = user_states[cid]
    stage = state['stage']
    text = message.text.strip()

    if stage == 'name':
        state['name'] = text
        state['stage'] = 'phone'
        bot.send_message(cid, "üì± –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:")
    
    elif stage == 'phone':
        if not is_valid_phone(text):
            bot.send_message(cid, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: +7XXXXXXXXXX")
            return
        state['phone'] = text
        state['stage'] = 'email'
        bot.send_message(cid, "üìß –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
    
    elif stage == 'email':
        if not is_valid_email(text):
            bot.send_message(cid, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
            return
        state['email'] = text
        state['stage'] = 'doc_type'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for doc in doc_types:
            markup.add(types.KeyboardButton(doc))
        bot.send_message(cid, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å:", reply_markup=markup)
    
    elif stage == 'doc_type':
        state['doc_type'] = text
        state['stage'] = 'task'
        bot.send_message(cid, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∑–∞–¥–∞—á–∏, –≤–∫–ª—é—á–∞—è:\n"
                              "‚Äî –¥–ª—è –∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç\n‚Äî –ø–æ –∫–∞–∫–æ–º—É –≤–æ–ø—Ä–æ—Å—É\n‚Äî –∏ —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å.")
    
    elif stage == 'task':
        state['task'] = text
        state['stage'] = 'complete'
        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")

        # –î–æ–±–∞–≤–∏–º –≤ Google –¢–∞–±–ª–∏—Ü—É
        sheet.append_row([now, state['name'], state['phone'], state['email'], state['doc_type'], state['task'], ""])

        # –£–≤–µ–¥–æ–º–∏–º –ê–¥–º–∏–Ω–∞
        msg = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"üë§ –ò–º—è: {state['name']}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {state['phone']}\n"
            f"üìß Email: {state['email']}\n"
            f"üìÑ –¢–∏–ø: {state['doc_type']}\n"
            f"üìù –ó–∞–¥–∞—á–∞: {state['task']}"
        )
        bot.send_message(ADMIN_CHAT_ID, msg)

        # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        bot.send_message(cid, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.\n"
                              "üìÇ –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì30 –º–∏–Ω—É—Ç.\n"
                              "–ï—Å–ª–∏ –±—É–¥—É—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è ‚Äî –º—ã —Å–≤—è–∂–µ–º—Å—è.")

    else:
        bot.send_message(cid, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start")
        user_states[cid] = {'stage': 'name'}

# === FLASK-SERVER ===
@app.route('/', methods=['GET'])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/', methods=['POST'])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return '', 200

def run_flask():
    app.run(host="0.0.0.0", port=8080)

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    threading.Thread(target=run_flask).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.remove_webhook()
    bot.set_webhook(url="https://flask-hello-world.onrender.com")  # ‚Üê –£–∫–∞–∂–∏ —Å–≤–æ–π Render URL
