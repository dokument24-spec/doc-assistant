import telebot
from telebot import types
import datetime
import os
import gspread
import time
import re
from oauth2client.service_account import ServiceAccountCredentials
from docx import Document
from flask import Flask, request

BOT_TOKEN = '7640880064:AAEOqKU4mWP06Ob96K3h4VDfrIhfK164Eg0'
ADMIN_ID = 5780051172
SHEET_NAME = "DocExpress_–ó–∞—è–≤–∫–∏"

bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}
current_step = {}
current_type = {}
last_submit_time = {}

# === Google –¢–∞–±–ª–∏—Ü–∞ ===
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SHEET_NAME).sheet1

# === –°—Ü–µ–Ω–∞—Ä–∏–∏ ===
scenarios = {
    "–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞": [
        "–ö–∞–∫ –∑–æ–≤—É—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞?",
        "–ö–∞–∫ –∑–æ–≤—É—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è?",
        "–ö–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?",
        "–î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –Ω—É–∂–Ω–æ –≤—Å—ë —Å–¥–µ–ª–∞—Ç—å?",
        "–°–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –∑–∞ —Ä–∞–±–æ—Ç—É?",
        "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏"
    ],
    "–ñ–∞–ª–æ–±–∞ –≤ –£–ö": [
        "–ù–∞ –∫–∞–∫–æ–º –∞–¥—Ä–µ—Å–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞?",
        "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? (–æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏)",
        "–ö–æ–≥–¥–∞ —ç—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
        "–ï—Å—Ç—å –ª–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞? (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)?",
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏"
    ],
    "–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Å—É–¥": [
        "–ö—Ç–æ –ø–æ–¥–∞—ë—Ç –∑–∞—è–≤–ª–µ–Ω–∏–µ (–≤–∞—à–µ –§–ò–û)?",
        "–ü—Ä–æ—Ç–∏–≤ –∫–æ–≥–æ –ø–æ–¥–∞—ë—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ (–§–ò–û)?",
        "–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? (–æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)",
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å—É–¥ —Ä–µ—à–∏–ª?",
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    ],
    "–ü—Ä–µ—Ç–µ–Ω–∑–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É": [
        "–ì–¥–µ –∏ —á—Ç–æ –≤—ã –∫—É–ø–∏–ª–∏?",
        "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å —Å —Ç–æ–≤–∞—Ä–æ–º –∏–ª–∏ —É—Å–ª—É–≥–æ–π?",
        "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å? (–≤–æ–∑–≤—Ä–∞—Ç, –∑–∞–º–µ–Ω–∞, —Ä–µ–º–æ–Ω—Ç)",
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω"
    ],
    "–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç": [
        "–ö—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫? (–§–ò–û –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è)",
        "–ö—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å?",
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ?",
        "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç?",
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    ],
    "–î–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": [
        "–ö—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç? (–§–ò–û)",
        "–ö–æ–º—É –¥–æ–≤–µ—Ä—è–µ—Ç? (–§–ò–û)",
        "–ù–∞ –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞—ë—Ç—Å—è –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å?",
        "–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫?",
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä"
    ],
    "–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø–∏—Å–∫–µ": [
        "–ö—Ç–æ –ø–æ–¥–∞—ë—Ç –∑–∞—è–≤–ª–µ–Ω–∏–µ?",
        "–ö–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å?",
        "–ê–¥—Ä–µ—Å –ø—Ä–æ–ø–∏—Å–∫–∏?",
        "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    ]
}

def is_valid_phone(phone):
    return re.match(r"^(\+7|8)\d{10}$", phone)

def can_submit(chat_id):
    now = time.time()
    if chat_id in last_submit_time and now - last_submit_time[chat_id] < 60:
        return False, int(60 - (now - last_submit_time[chat_id]))
    last_submit_time[chat_id] = now
    return True, 0

def generate_docx(doc_type, answers):
    doc = Document()
    doc.add_heading(doc_type, 0)
    for i, (q, a) in enumerate(answers, 1):
        doc.add_paragraph(f"{i}. {q}")
        doc.add_paragraph(f"   ‚û§ {a}", style='List Bullet')
    filename = f"{doc_type}_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
    filepath = f"/tmp/{filename}"
    doc.save(filepath)
    return filepath

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for key in scenarios:
        markup.add(types.KeyboardButton(key))
    bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–û—Ñ–æ—Ä–º–ª—è—Ç–æ—Ä¬ª!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in scenarios)
def start_scenario(message):
    cid = message.chat.id
    current_type[cid] = message.text
    current_step[cid] = 0
    user_data[cid] = []
    bot.send_message(cid, scenarios[message.text][0])

@bot.message_handler(func=lambda msg: msg.chat.id in current_step)
def handle_response(message):
    cid = message.chat.id
    step = current_step[cid]
    scenario = scenarios[current_type[cid]]
    user_data[cid].append((scenario[step], message.text))

    if "—Ç–µ–ª–µ—Ñ–æ–Ω" in scenario[step].lower():
        if not is_valid_phone(message.text):
            bot.send_message(cid, "‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX")
            return

    step += 1
    if step < len(scenario):
        current_step[cid] = step
        bot.send_message(cid, scenario[step])
    else:
        bot.send_message(cid, "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:")
        for q, a in user_data[cid]:
            bot.send_message(cid, f"{q}\n‚û§ {a}")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("‚úÖ –î–∞", "‚ùå –ù–µ—Ç")
        bot.send_message(cid, "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç?", reply_markup=markup)
        current_step.pop(cid)

@bot.message_handler(func=lambda msg: msg.text in ["‚úÖ –î–∞", "‚ùå –ù–µ—Ç"])
def confirm_send(message):
    cid = message.chat.id
    if message.text == "‚úÖ –î–∞":
        allowed, wait = can_submit(cid)
        if not allowed:
            bot.send_message(cid, f"‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ {wait} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–æ–π.")
            return

        doc_type = current_type[cid]
        answers = user_data[cid]
        filepath = generate_docx(doc_type, answers)

        with open(filepath, "rb") as f:
            bot.send_document(cid, f)

        now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        try:
            sheet.append_row([now, cid, doc_type] + [a for _, a in answers])
        except Exception as e:
            bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

        user = message.from_user
        summary = f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username or '–ë–µ–∑ –Ω–∏–∫–∞'}\n–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}\n"
        for q, a in answers:
            summary += f"\n{q}\n‚û§ {a}"
        bot.send_message(ADMIN_ID, summary)
        bot.send_message(cid, "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!")
    else:
        bot.send_message(cid, "üîÅ –•–æ—Ä–æ—à–æ, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.")
        start(message)

@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    cid = message.chat.id
    bot.send_message(cid, "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º üôè")
    bot.send_voice(ADMIN_ID, message.voice.file_id, caption=f"üéß –ì–æ–ª–æ—Å–æ–≤–æ–µ –æ—Ç {cid}")

@bot.message_handler(content_types=['photo', 'document', 'audio', 'video'])
def handle_files(message):
    cid = message.chat.id
    doc_type = current_type.get(cid, "–ë–µ–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    username = f"@{message.from_user.username}" if message.from_user.username else "–±–µ–∑ –Ω–∏–∫–∞"

    file_info = None
    if message.content_type == 'photo':
        file_info = bot.get_file(message.photo[-1].file_id)
        file_type = "üì∑ –§–æ—Ç–æ"
    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        file_type = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name}"
    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        file_type = f"üéµ –ê—É–¥–∏–æ: {message.audio.title or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}"
    elif message.content_type == 'video':
        file_info = bot.get_file(message.video.file_id)
        file_type = "üéû –í–∏–¥–µ–æ"

    if file_info:
        downloaded_file = bot.download_file(file_info.file_path)
        filename = file_info.file_path.split('/')[-1]
        filepath = f"/tmp/{filename}"
        with open(filepath, 'wb') as f:
            f.write(downloaded_file)

        bot.send_message(cid, f"{file_type} –ø–æ–ª—É—á–µ–Ω ‚úÖ")
        with open(filepath, 'rb') as f:
            caption = f"üìé –§–∞–π–ª –æ—Ç {username}\nID: {cid}\n–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}"
            bot.send_document(ADMIN_ID, f, caption=caption)

# === Flask Webhook ===
app = Flask(__name__)

@app.route('/')
def index():
    return "–û—Ñ–æ—Ä–º–ª—è—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç."

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

if __name__ == '__main__':
    app.run(debug=True)

